/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StressTestFrame.java
 *
 * Created on May 22, 2009, 9:57:20 PM
 */

package com.xmlgateway.server.simulator;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import javax.swing.SwingWorker;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.joda.time.DateTime;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Seconds;
import org.jpos.iso.ISOMUX;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISORequest;

/**
 *
 * @author ifnu
 */
public class StressTestFrame extends javax.swing.JFrame {
    private static final Log LOGGER = LogFactory.getLog(StressTestFrame.class);

//    private MessageCreator axisMessageCreator = new AxisMessageCreator();
    private MessageCreator gatewayMessageCreator = new GatewayMessageCreator();
    private MessageCreator permataMessageCreator = new BankMessageCreator();

    private DateTime dateTime;

    long start = System.currentTimeMillis();

    /** Creates new form StressTestFrame */
    public StressTestFrame() {
        initComponents();
        setLocationRelativeTo(null);
        dateTime = new DateTime();
//        itm = PropertiesDataFactory.getITMServer();
//        LOGGER.info("ITM Server @ " + itm.getHost() + ":" + itm.getPort());

        //connect to itm
//        ISOChannel channel = new PostChannel(itm.getHost(),itm.getPort(), PackagerFactory.getPermataPackager());
//        isomuxItm = new ISOMUX(channel){
//
//            @Override
//            protected String getKey(ISOMsg m) throws ISOException {
//                return m.getString(11);
//            }
//
//        };
//        new Thread(isomuxItm).start();
//
//        gateway = PropertiesDataFactory.getGateway();
//        LOGGER.info("Gateway Server @ " + gateway.getHost() + ":" + gateway.getPort());
//
//        //connect to gateway
//        channel = new PostChannel(gateway.getHost(),gateway.getPort(), PackagerFactory.getGatewayPackager());
//        isomuxGateway = new ISOMUX(channel){
//
//            @Override
//            protected String getKey(ISOMsg m) throws ISOException {
//                return m.getString(11);
//            }
//
//        };
//        new Thread(isomuxGateway).start();
//
//        axis = PropertiesDataFactory.getAxisServer();
//        LOGGER.info("Axis Server @ " + axis.getHost() + ":" + axis.getPort());
//
//        //connect to axis
//        channel = new PostChannel(axis.getHost(),axis.getPort(), PackagerFactory.getAxisPackager());
//        isomuxAxis = new ISOMUX(channel){
//
//            @Override
//            protected String getKey(ISOMsg m) throws ISOException {
//                return m.getString(11);
//            }
//
//        };
//        new Thread(isomuxAxis).start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jrbItm = new javax.swing.JRadioButton();
        jrbGateway = new javax.swing.JRadioButton();
        jrbAxis = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jrb0200 = new javax.swing.JRadioButton();
        jrb0800 = new javax.swing.JRadioButton();
        jrb02000400 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtJumlahMessage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHasil = new javax.swing.JTextArea();
        btnRun = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stress Test Tool");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Skenario Stress Test"));

        buttonGroup1.add(jrbItm);
        jrbItm.setSelected(true);
        jrbItm.setText("ITM-Gateway-Hut");

        buttonGroup1.add(jrbGateway);
        jrbGateway.setText("Gateway-Hut");

        buttonGroup1.add(jrbAxis);
        jrbAxis.setText("Hut");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbAxis)
                    .addComponent(jrbGateway)
                    .addComponent(jrbItm))
                .addContainerGap(328, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jrbItm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbGateway)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbAxis))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Jenis Message"));

        buttonGroup2.add(jrb0200);
        jrb0200.setSelected(true);
        jrb0200.setText("0200");

        buttonGroup2.add(jrb0800);
        jrb0800.setText("0800");

        buttonGroup2.add(jrb02000400);
        jrb02000400.setText("0200 & 0400");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrb02000400)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jrb0800)
                        .addComponent(jrb0200)))
                .addContainerGap(359, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jrb0200)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrb02000400)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jrb0800)
                .addContainerGap())
        );

        jLabel1.setText("Jumlah Message");

        txtJumlahMessage.setText("1000");

        txtHasil.setColumns(20);
        txtHasil.setRows(5);
        jScrollPane1.setViewportView(txtHasil);

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(txtJumlahMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRun)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtJumlahMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRun)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                btnRun.setEnabled(false);
                resetStatistic();
                int num = Integer.parseInt(txtJumlahMessage.getText());
                List<ISOMsg> messages = null;
                ISOMUX isomux = null;
                MessageCreator messageCreator = null;
                if (jrbAxis.isSelected()) {
//                    messageCreator = axisMessageCreator;
//                    isomux = isomuxAxis;
                } else if (jrbGateway.isSelected()) {
                    messageCreator = gatewayMessageCreator;
//                    isomux = isomuxGateway;
                } else {
                    messageCreator = permataMessageCreator;
//                    isomux = isomuxItm;
                }
                if(jrb0200.isSelected() || jrb02000400.isSelected()){
//                    messages = messageCreator.create0200Bulk(PropertiesDataFactory.getAxisTopupAmount(), PropertiesDataFactory.getAxisMobileNumber(), num);
                } else if(jrb0800.isSelected()) {
                    messages = messageCreator.create0800Bulk(num);
                }
                for (ISOMsg msg : messages) {
                    long startMessage = System.currentTimeMillis();
                    ISORequest request = new ISORequest(msg);
                    isomux.queue(request);
//                    ISOMsg reply = request.getResponse(PropertiesDataFactory.getStressToolTimeOut());
//                    if(reply == null){
//                        if(jrb02000400.isSelected()){
//                            long startReversal = System.currentTimeMillis();
//                            addRequestMessageReversal();
//                            ISOMsg reversal = messageCreator.create0400(msg);
//                            request = new ISORequest(reversal);
//                            isomux.queue(request);
//                            reply = request.getResponse(PropertiesDataFactory.getStressToolTimeOut());
//                            if(reply !=null){
//                                addResponseMessageReversal();
//                                addTotalResponseTimeReversal(System.currentTimeMillis()-startReversal);
//                            }
//                        }
//                    } else {
//                        addResponseMessage();
//                        addTotalResponseTime(System.currentTimeMillis() - startMessage);
//                    }
                }
                btnRun.setEnabled(true);
                return "";
            }
        };
        worker.execute();
    }//GEN-LAST:event_btnRunActionPerformed

    private BigDecimal totalResponseTime = BigDecimal.ZERO;
    private int responseMessage;
    private BigDecimal totalResponseTimeReversal = BigDecimal.ZERO;
    private int responseMessageReversal;
    private int requestMessageReversal;

    private void resetStatistic(){
        dateTime = new DateTime();
        start = System.currentTimeMillis();
        totalResponseTime = BigDecimal.ZERO;
        responseMessage = 0;
        totalResponseTimeReversal = BigDecimal.ZERO;
        responseMessageReversal = 0;
        requestMessageReversal = 0;
    }

    public void addResponseMessage() {
        this.responseMessage++;
        showStatistic();
    }

    public void addRequestMessageReversal() {
        this.requestMessageReversal++;
        showStatistic();
    }

    public void addResponseMessageReversal() {
        this.responseMessageReversal++;
        showStatistic();
    }

    public void addTotalResponseTime(long responseTime) {
        this.totalResponseTime = totalResponseTime.add(new BigDecimal(responseTime));
        showStatistic();
    }

    public void addTotalResponseTimeReversal(long responseTime) {
        this.totalResponseTimeReversal = totalResponseTimeReversal.add(new BigDecimal(responseTime));
        showStatistic();
    }

    public void showStatistic(){
        DateTime elapsedTime = new DateTime();
        StringBuilder builder = new StringBuilder();
        builder.append("Elapsed time : " + Hours.hoursBetween(dateTime, elapsedTime).getHours());
        builder.append(":" + Minutes.minutesBetween(dateTime, elapsedTime).getMinutes() % 60);
        builder.append(":" + Seconds.secondsBetween(dateTime, elapsedTime).getSeconds() % 60);
        builder.append("\n");
        builder.append("Total Request " + txtJumlahMessage.getText() + "\n");
        builder.append("Total Response " + responseMessage + "\n");
        builder.append("Total Reversal Request " + requestMessageReversal + "\n");
        builder.append("Total Reversal Response " + responseMessageReversal + "\n");
        if(responseMessage>0){
            BigDecimal averageRate = totalResponseTime.divide(new BigDecimal(responseMessage), RoundingMode.HALF_EVEN);
            builder.append("Average Request Time " +
                    averageRate + " ms\n");
            if(averageRate.compareTo(BigDecimal.ZERO)!=0)
                builder.append("Transaction Speed " +
                    new BigDecimal(1000).divide(averageRate,RoundingMode.HALF_EVEN) + " tps\n");
        }
        if(responseMessageReversal>0){
            BigDecimal averageRate = totalResponseTimeReversal.divide(new BigDecimal(responseMessageReversal),RoundingMode.HALF_EVEN);
            builder.append("Average Reversal Request Time " +
                     averageRate + " ms\n");
            if(averageRate.compareTo(BigDecimal.ZERO)!=0)
                builder.append("Reversal Speed " +
                    new BigDecimal(1000).divide(averageRate,RoundingMode.HALF_EVEN) + " tps\n");
        }
        txtHasil.setText(builder.toString());
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StressTestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton jrb0200;
    private javax.swing.JRadioButton jrb02000400;
    private javax.swing.JRadioButton jrb0800;
    private javax.swing.JRadioButton jrbAxis;
    private javax.swing.JRadioButton jrbGateway;
    private javax.swing.JRadioButton jrbItm;
    private javax.swing.JTextArea txtHasil;
    private javax.swing.JTextField txtJumlahMessage;
    // End of variables declaration//GEN-END:variables

}
